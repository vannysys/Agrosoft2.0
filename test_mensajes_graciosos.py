#!/usr/bin/env python
"""
Prueba de mensajes graciosos para rentabilidades bajas
"""

import sys
import os
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'agrosoft.settings')

import django
django.setup()

from productores.sipsa_service import SipsaService
from productores.views import obtener_mensaje_gracioso

def buscar_escenarios_bajos():
    """
    Busca escenarios con rentabilidades bajas para probar mensajes
    """
    print("üòÑ BUSCANDO ESCENARIOS PARA MENSAJES GRACIOSOS")
    print("=" * 60)
    
    sipsa = SipsaService()
    
    # Probar diferentes combinaciones para encontrar rentabilidades bajas
    municipios = ['Facatativ√°', 'Madrid', 'Mosquera', 'El Rosal', 'Subachoque', 'Bojac√°', 'Funza']
    fechas = [
        datetime(2025, 7, 15),   # √âpoca dif√≠cil (invierno)
        datetime(2025, 8, 15),   # Agosto (√©poca regular)
        datetime(2025, 3, 15),   # Marzo (transici√≥n)
        datetime(2025, 6, 15),   # Junio (inicio lluvias)
    ]
    temperaturas = [8.0, 22.0, 25.0]  # Temperaturas extremas
    
    escenarios_bajos = []
    
    for municipio in municipios:
        for fecha in fechas:
            for temp in temperaturas:
                recomendaciones = sipsa.obtener_productos_recomendados(municipio, fecha, temp)
                
                if recomendaciones:
                    max_rentabilidad = max(rec['rentabilidad_estimada'] for rec in recomendaciones)
                    
                    if max_rentabilidad < 50:  # Rentabilidad baja
                        escenarios_bajos.append({
                            'municipio': municipio,
                            'fecha': fecha,
                            'temp': temp,
                            'max_rent': max_rentabilidad,
                            'recomendaciones': recomendaciones[:3]  # Top 3
                        })
    
    # Mostrar escenarios encontrados
    print(f"üìä Encontrados {len(escenarios_bajos)} escenarios con rentabilidades bajas")
    
    if escenarios_bajos:
        print("\nEscenarios con rentabilidades < 50%:")
        print("-" * 60)
        
        for i, escenario in enumerate(escenarios_bajos[:5], 1):  # Mostrar solo 5
            print(f"\n{i}. {escenario['municipio']} - {escenario['fecha'].strftime('%d/%m/%Y')} - {escenario['temp']}¬∞C")
            print(f"   Rentabilidad m√°xima: {escenario['max_rent']:.1f}%")
            
            # Mostrar top 3 productos
            for j, rec in enumerate(escenario['recomendaciones'], 1):
                print(f"   {j}. {rec['producto'][:15]}: {rec['rentabilidad_estimada']:.1f}%")
    
    return escenarios_bajos

def probar_mensajes_por_categoria():
    """
    Prueba los diferentes tipos de mensajes seg√∫n el nivel de rentabilidad
    """
    print("\n\nüòÇ PROBANDO MENSAJES POR CATEGOR√çA")
    print("=" * 60)
    
    # Simular diferentes niveles de rentabilidad
    niveles_test = [
        (10.0, "Muy Baja (0-20%)"),
        (25.0, "Baja (20-35%)"),
        (42.0, "Regular Baja (35-50%)"),
        (55.0, "Sin Mensaje (‚â•50%)")
    ]
    
    municipio = "Facatativ√°"
    fecha = datetime(2025, 7, 15)
    
    for rentabilidad, categoria in niveles_test:
        print(f"\nüìä {categoria} - Rentabilidad: {rentabilidad}%")
        print("-" * 50)
        
        mensaje = obtener_mensaje_gracioso(rentabilidad, municipio, fecha)
        
        if mensaje:
            print(f"üí¨ Mensaje: {mensaje}")
        else:
            print("üîá Sin mensaje (rentabilidad suficiente)")

def probar_variedad_mensajes():
    """
    Prueba que haya variedad en los mensajes (no siempre el mismo)
    """
    print("\n\nüé≤ PROBANDO VARIEDAD DE MENSAJES")
    print("=" * 60)
    
    municipio = "Subachoque"
    fecha = datetime(2025, 7, 15)
    rentabilidad = 15.0  # Muy baja para activar mensajes
    
    mensajes_generados = []
    
    print("Generando 10 mensajes para rentabilidad muy baja (15%):")
    print("-" * 50)
    
    for i in range(10):
        mensaje = obtener_mensaje_gracioso(rentabilidad, municipio, fecha)
        mensajes_generados.append(mensaje)
        print(f"{i+1:2d}. {mensaje}")
    
    # Verificar variedad
    mensajes_unicos = len(set(mensajes_generados))
    print(f"\nüìä Estad√≠sticas:")
    print(f"‚Ä¢ Total mensajes generados: {len(mensajes_generados)}")
    print(f"‚Ä¢ Mensajes √∫nicos: {mensajes_unicos}")
    print(f"‚Ä¢ Variedad: {mensajes_unicos/len(mensajes_generados)*100:.1f}%")
    
    if mensajes_unicos >= 5:
        print("‚úÖ Buena variedad de mensajes")
    else:
        print("‚ö†Ô∏è Poca variedad, considera agregar m√°s mensajes")

def simular_escenario_completo():
    """
    Simula un escenario completo como aparecer√≠a en el navegador
    """
    print("\n\nüåê SIMULACI√ìN COMPLETA DEL NAVEGADOR")
    print("=" * 60)
    
    sipsa = SipsaService()
    
    # Buscar un escenario con rentabilidades bajas
    municipio = "El Rosal"
    fecha = datetime(2025, 7, 15)  # √âpoca dif√≠cil
    temp = 8.0  # Temperatura muy baja
    
    print(f"üìç Municipio: {municipio}")
    print(f"üìÖ Fecha: {fecha.strftime('%d/%m/%Y')}")
    print(f"üå°Ô∏è Temperatura: {temp}¬∞C")
    print("-" * 40)
    
    recomendaciones = sipsa.obtener_productos_recomendados(municipio, fecha, temp)
    
    if recomendaciones:
        max_rentabilidad = max(rec['rentabilidad_estimada'] for rec in recomendaciones)
        print(f"üìä Rentabilidad m√°xima: {max_rentabilidad:.1f}%")
        
        # Mostrar top 5 productos
        print("\nüèÜ Top 5 Recomendaciones:")
        for i, rec in enumerate(recomendaciones[:5], 1):
            producto = rec['producto'][:15]
            rentabilidad = rec['rentabilidad_estimada']
            tendencia = rec['tendencia']
            
            if rentabilidad > 30:
                emoji = "üü†"
            elif rentabilidad > 15:
                emoji = "üî¥"
            else:
                emoji = "‚ùå"
            
            print(f"{i}. {emoji} {producto:<15} {rentabilidad:>6.1f}% ({tendencia})")
        
        # Generar mensaje gracioso si aplica
        if max_rentabilidad < 50:
            mensaje = obtener_mensaje_gracioso(max_rentabilidad, municipio, fecha)
            print(f"\nüö® MENSAJE GRACIOSO ACTIVADO:")
            print(f"üì¢ {mensaje}")
            
            # Simular c√≥mo se ver√≠a en HTML
            print(f"\nüåê VISTA EN EL NAVEGADOR:")
            print("‚îå" + "‚îÄ" * 58 + "‚îê")
            print("‚îÇ üö® ¬°Alerta de Rentabilidad Baja! üö®                   ‚îÇ")
            print("‚îú" + "‚îÄ" * 58 + "‚î§")
            print(f"‚îÇ {mensaje[:56]:<56} ‚îÇ")
            if len(mensaje) > 56:
                print(f"‚îÇ {mensaje[56:]:<56} ‚îÇ")
            print("‚îú" + "‚îÄ" * 58 + "‚î§")
            print("‚îÇ üí° Consejo: Considera esperar una √©poca m√°s favorable ‚îÇ")
            print("‚îî" + "‚îÄ" * 58 + "‚îò")
        else:
            print(f"\n‚úÖ Sin mensaje gracioso (rentabilidad {max_rentabilidad:.1f}% es aceptable)")

def mostrar_todos_los_mensajes():
    """
    Muestra todos los mensajes disponibles por categor√≠a
    """
    print("\n\nüìù CAT√ÅLOGO COMPLETO DE MENSAJES")
    print("=" * 60)
    
    print("üî¥ MENSAJES MUY BAJOS (0-20%):")
    mensajes_muy_bajos = [
        "üêÑ En {municipio} mejor compra ganado, las vacas no dependen del clima",
        "üöö Considera un carrito de comidas en {municipio}, los tacos siempre venden",
        "üè† Alquila tu terreno y vete de vacaciones, ser√° m√°s rentable",
        "üé£ Mejor ded√≠cate a la pesca, los peces no leen el SIPSA",
        "üçï Abre una pizzer√≠a, la gente siempre tiene hambre",
        "üöó Uber en {municipio} puede ser m√°s rentable que sembrar",
        "üíª Aprende programaci√≥n, los bugs crecen m√°s r√°pido que las plantas",
        "üé™ Monta un circo, ser√° menos riesgoso que la agricultura"
    ]
    
    for i, mensaje in enumerate(mensajes_muy_bajos, 1):
        print(f"{i:2d}. {mensaje}")
    
    print(f"\nüü† MENSAJES BAJOS (20-35%):")
    mensajes_bajos = [
        "üêî Considera gallinas ponedoras, los huevos no tienen temporada baja",
        "üè™ Una tienda de barrio en {municipio} podr√≠a ser mejor opci√≥n",
        "üöú Alquila tu tractor a otros, que ellos corran el riesgo",
        "üåª Siembra girasoles para selfies, el turismo rural est√° de moda",
        "üçØ La apicultura podr√≠a ser m√°s dulce que estos n√∫meros",
        "üêü Piscicultura: los peces no protestan por el clima",
        "üéØ Mejor invierte en un billar, siempre hay clientes",
        "üèãÔ∏è Abre un gimnasio rural, la gente necesita ejercitarse"
    ]
    
    for i, mensaje in enumerate(mensajes_bajos, 1):
        print(f"{i:2d}. {mensaje}")
    
    print(f"\nüü° MENSAJES REGULARES BAJOS (35-50%):")
    mensajes_regulares = [
        "ü§î En {municipio} tal vez sea mejor esperar una √©poca m√°s favorable",
        "üå± Considera cultivos de ciclo corto, menos riesgo y m√°s rotaci√≥n",
        "üè° Huerta casera para autoconsumo y venta local podr√≠a funcionar",
        "üê∞ Conejos: se reproducen r√°pido y no dependen tanto del clima",
        "üåø Plantas arom√°ticas para restaurantes, nicho peque√±o pero seguro",
        "üçÑ Hongos comestibles: crecen en cualquier clima controlado",
        "üé® Agro-turismo: que otros paguen por ver tu terreno",
        "üìö Estudia el mercado un poco m√°s, estos n√∫meros no convencen"
    ]
    
    for i, mensaje in enumerate(mensajes_regulares, 1):
        print(f"{i:2d}. {mensaje}")
    
    print(f"\nüìä TOTAL: {len(mensajes_muy_bajos + mensajes_bajos + mensajes_regulares)} mensajes √∫nicos")

if __name__ == "__main__":
    try:
        print("üòÑ AGROSOFT - MENSAJES GRACIOSOS PARA RENTABILIDADES BAJAS")
        print("=" * 80)
        
        escenarios_bajos = buscar_escenarios_bajos()
        probar_mensajes_por_categoria()
        probar_variedad_mensajes()
        simular_escenario_completo()
        mostrar_todos_los_mensajes()
        
        print("\n" + "=" * 80)
        print("‚úÖ SISTEMA DE MENSAJES GRACIOSOS IMPLEMENTADO")
        print("‚Ä¢ 24 mensajes √∫nicos en 3 categor√≠as")
        print("‚Ä¢ Activaci√≥n autom√°tica cuando rentabilidad m√°xima < 50%")
        print("‚Ä¢ Variedad aleatoria para evitar repetici√≥n")
        print("‚Ä¢ Integrado en la interfaz web con estilo atractivo")
        print("‚Ä¢ Mensajes divertidos pero informativos")
        
        print("\nüåê Prueba en el navegador:")
        print("http://127.0.0.1:8000/")
        print("Selecciona El Rosal + Julio + temperaturas extremas para ver mensajes")
        
    except Exception as e:
        print(f"Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
