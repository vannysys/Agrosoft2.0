#!/usr/bin/env python
"""
Prueba final del sistema AgroSoft con comentarios profesionales
"""

import sys
import os
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'agrosoft.settings')

import django
django.setup()

from productores.sipsa_service import SipsaService
from productores.views import obtener_clima_openweather

def probar_fecha_actualizacion():
    """
    Verifica que la fecha de √∫ltima actualizaci√≥n aparezca correctamente
    """
    print("üìÖ PROBANDO FECHA DE √öLTIMA ACTUALIZACI√ìN")
    print("=" * 50)
    
    sipsa = SipsaService()
    estadisticas = sipsa.obtener_estadisticas_mercado()
    
    if estadisticas and 'fecha_ultima_actualizacion' in estadisticas:
        fecha = estadisticas['fecha_ultima_actualizacion']
        print(f"‚úÖ Fecha obtenida: {fecha}")
        
        if fecha and fecha != "":
            print("‚úÖ La fecha NO est√° en blanco")
            return True
        else:
            print("‚ùå La fecha est√° en blanco")
            return False
    else:
        print("‚ùå No se encontraron estad√≠sticas")
        return False

def probar_factor_climatico_dinamico():
    """
    Verifica que el factor clim√°tico cambie seg√∫n municipio y fecha
    """
    print("\nüå°Ô∏è PROBANDO FACTOR CLIM√ÅTICO DIN√ÅMICO")
    print("=" * 50)
    
    sipsa = SipsaService()
    
    escenarios = [
        ("Facatativ√°", datetime(2025, 8, 22)),
        ("Subachoque", datetime(2025, 8, 22)),
        ("Facatativ√°", datetime(2025, 1, 15)),
        ("Subachoque", datetime(2025, 1, 15)),
    ]
    
    resultados = []
    
    for municipio, fecha in escenarios:
        clima = obtener_clima_openweather(municipio, fecha)
        recomendaciones = sipsa.obtener_productos_recomendados(municipio, fecha, clima)
        
        if recomendaciones:
            papa = next((r for r in recomendaciones if 'PAPA' in r['producto']), None)
            if papa:
                factor = papa.get('clima_factor', 1.0)
                resultados.append(factor)
                print(f"{municipio} {fecha.strftime('%m/%Y')}: {clima}¬∞C ‚Üí Factor {factor:.2f}x")
    
    factores_unicos = len(set(resultados))
    if factores_unicos > 1:
        print(f"‚úÖ Factor clim√°tico var√≠a ({factores_unicos} valores diferentes)")
        return True
    else:
        print(f"‚ùå Factor clim√°tico no var√≠a (todos iguales: {resultados[0]:.2f}x)")
        return False

def probar_comentarios_profesionales():
    """
    Verifica que los comentarios sean apropiados para entorno acad√©mico
    """
    print("\nüìù VERIFICANDO COMENTARIOS PROFESIONALES")
    print("=" * 50)
    
    archivos_revisar = [
        'productores/sipsa_service.py',
        'productores/views.py'
    ]
    
    comentarios_informales = [
        'üéâ', '‚úÖ', '‚ùå', 'üî•', 'üí•', 'üöÄ', 'üåü', 
        'genial', 'incre√≠ble', 's√∫per', 'wow'
    ]
    
    archivos_limpios = 0
    
    for archivo in archivos_revisar:
        try:
            with open(archivo, 'r', encoding='utf-8') as f:
                contenido = f.read().lower()
            
            encontrados = [emoji for emoji in comentarios_informales if emoji in contenido]
            
            if not encontrados:
                print(f"‚úÖ {archivo}: Comentarios profesionales")
                archivos_limpios += 1
            else:
                print(f"‚ö†Ô∏è {archivo}: Encontrados elementos informales: {encontrados[:3]}")
                
        except FileNotFoundError:
            print(f"‚ùå {archivo}: Archivo no encontrado")
    
    return archivos_limpios == len(archivos_revisar)

def probar_funcionalidad_completa():
    """
    Prueba integral de todas las funcionalidades
    """
    print("\nüéØ PRUEBA INTEGRAL DEL SISTEMA")
    print("=" * 50)
    
    sipsa = SipsaService()
    municipio = "Facatativ√°"
    fecha = datetime.now()
    
    clima = obtener_clima_openweather(municipio, fecha)
    print(f"Clima obtenido: {clima}¬∞C")
    
    recomendaciones = sipsa.obtener_productos_recomendados(municipio, fecha, clima)
    print(f"Recomendaciones generadas: {len(recomendaciones)}")
    
    estadisticas = sipsa.obtener_estadisticas_mercado()
    print(f"Estad√≠sticas obtenidas: {bool(estadisticas)}")
    
    if recomendaciones and estadisticas and clima:
        print("‚úÖ Sistema completamente funcional")
        
        print("\nTop 3 recomendaciones:")
        for i, rec in enumerate(recomendaciones[:3], 1):
            factor_clima = rec.get('clima_factor', 1.0)
            print(f"{i}. {rec['producto']}: ${rec['precio_actual']:,} (Factor: {factor_clima:.2f}x)")
        
        return True
    else:
        print("‚ùå Sistema con problemas")
        return False

def mostrar_resumen_final():
    """
    Presenta el estado final del sistema
    """
    print("\nüìä RESUMEN FINAL DEL SISTEMA")
    print("=" * 50)
    
    print("CARACTER√çSTICAS IMPLEMENTADAS:")
    print("‚Ä¢ Datos reales basados en precios de Corabastos")
    print("‚Ä¢ Factor clim√°tico din√°mico por municipio y fecha")
    print("‚Ä¢ API de clima real con fallback simulado")
    print("‚Ä¢ Fecha de √∫ltima actualizaci√≥n funcionando")
    print("‚Ä¢ Comentarios profesionales y acad√©micos")
    print("‚Ä¢ Sistema robusto con m√∫ltiples fallbacks")
    
    print("\nCOMPONENTES T√âCNICOS:")
    print("‚Ä¢ SipsaService: An√°lisis de precios agr√≠colas")
    print("‚Ä¢ DatosRealesService: Simulaci√≥n basada en datos reales")
    print("‚Ä¢ OpenWeatherMap API: Datos meteorol√≥gicos")
    print("‚Ä¢ Sistema de cache: Optimizaci√≥n de rendimiento")
    print("‚Ä¢ Algoritmos de predicci√≥n: Factores contextuales")
    
    print("\nESTADO ACTUAL:")
    print("‚Ä¢ Servidor Django: Activo en puerto 8000")
    print("‚Ä¢ Base de datos: SQLite configurada")
    print("‚Ä¢ Templates: Interfaz responsive completa")
    print("‚Ä¢ APIs externas: Configuradas y funcionales")

if __name__ == "__main__":
    try:
        print("üå± AGROSOFT - VERIFICACI√ìN FINAL")
        print("=" * 60)
        
        fecha_ok = probar_fecha_actualizacion()
        factor_ok = probar_factor_climatico_dinamico()
        comentarios_ok = probar_comentarios_profesionales()
        sistema_ok = probar_funcionalidad_completa()
        
        mostrar_resumen_final()
        
        print("\n" + "=" * 60)
        print("RESULTADOS DE VERIFICACI√ìN:")
        print(f"‚Ä¢ Fecha de actualizaci√≥n: {'‚úÖ OK' if fecha_ok else '‚ùå ERROR'}")
        print(f"‚Ä¢ Factor clim√°tico din√°mico: {'‚úÖ OK' if factor_ok else '‚ùå ERROR'}")
        print(f"‚Ä¢ Comentarios profesionales: {'‚úÖ OK' if comentarios_ok else '‚ùå REVISAR'}")
        print(f"‚Ä¢ Sistema integral: {'‚úÖ OK' if sistema_ok else '‚ùå ERROR'}")
        
        if all([fecha_ok, factor_ok, comentarios_ok, sistema_ok]):
            print("\nüéì SISTEMA APROBADO PARA ENTREGA ACAD√âMICA")
            print("Listo para presentaci√≥n universitaria")
        else:
            print("\n‚ö†Ô∏è REVISAR ELEMENTOS MARCADOS")
        
        print(f"\nüåê Acceder en: http://127.0.0.1:8000/")
        
    except Exception as e:
        print(f"Error durante verificaci√≥n: {e}")
        sys.exit(1)
