#!/usr/bin/env python
"""
Prueba del sistema con rango completo 0-100% pero distribuci√≥n realista
"""

import sys
import os
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'agrosoft.settings')

import django
django.setup()

from productores.sipsa_service import SipsaService

def probar_rango_completo():
    """
    Prueba que el sistema tenga rango completo 0-100% con distribuci√≥n realista
    """
    print("üí∞ SISTEMA CON RANGO COMPLETO 0-100%")
    print("=" * 60)
    
    sipsa = SipsaService()
    
    # Probar m√∫ltiples escenarios para obtener rango completo
    escenarios = [
        ("Facatativ√°", datetime(2025, 1, 15), 14.0, "Invierno ideal"),
        ("Subachoque", datetime(2025, 1, 15), 12.0, "Invierno fr√≠o"),
        ("Madrid", datetime(2025, 4, 15), 18.0, "Primavera"),
        ("Mosquera", datetime(2025, 7, 15), 16.0, "Invierno medio"),
        ("Bojac√°", datetime(2025, 10, 15), 20.0, "Veranillo"),
        ("El Rosal", datetime(2025, 12, 15), 10.0, "Diciembre fr√≠o"),
    ]
    
    todas_rentabilidades = []
    productos_por_rango = {
        "Excelente (80-100%)": [],
        "Muy Buena (60-79%)": [],
        "Buena (40-59%)": [],
        "Regular (20-39%)": [],
        "Baja (5-19%)": [],
        "Muy Baja (0-4%)": [],
        "P√©rdida (<0%)": []
    }
    
    for municipio, fecha, temp, descripcion in escenarios:
        print(f"\nüìç {municipio} - {descripcion}")
        print(f"üå°Ô∏è {temp}¬∞C | üìÖ {fecha.strftime('%d/%m/%Y')}")
        print("-" * 50)
        
        recomendaciones = sipsa.obtener_productos_recomendados(municipio, fecha, temp)
        
        if recomendaciones:
            print("Producto         Rentab.  Tendencia  Factores      Estado")
            print("-" * 60)
            
            for rec in recomendaciones[:6]:  # Top 6 por escenario
                producto = rec['producto'][:12]
                rentabilidad = rec['rentabilidad_estimada']
                tendencia = rec['tendencia']
                factor_mun = rec['municipio_factor']
                factor_clima = rec.get('clima_factor', 1.0)
                
                todas_rentabilidades.append(rentabilidad)
                
                # Clasificar por rango
                if rentabilidad >= 80:
                    productos_por_rango["Excelente (80-100%)"].append(f"{producto} ({rentabilidad:.1f}%)")
                    estado = "üü¢ EXCELENTE"
                elif rentabilidad >= 60:
                    productos_por_rango["Muy Buena (60-79%)"].append(f"{producto} ({rentabilidad:.1f}%)")
                    estado = "üü° MUY BUENA"
                elif rentabilidad >= 40:
                    productos_por_rango["Buena (40-59%)"].append(f"{producto} ({rentabilidad:.1f}%)")
                    estado = "üü† BUENA"
                elif rentabilidad >= 20:
                    productos_por_rango["Regular (20-39%)"].append(f"{producto} ({rentabilidad:.1f}%)")
                    estado = "üîµ REGULAR"
                elif rentabilidad >= 5:
                    productos_por_rango["Baja (5-19%)"].append(f"{producto} ({rentabilidad:.1f}%)")
                    estado = "üü§ BAJA"
                elif rentabilidad >= 0:
                    productos_por_rango["Muy Baja (0-4%)"].append(f"{producto} ({rentabilidad:.1f}%)")
                    estado = "‚ö™ MUY BAJA"
                else:
                    productos_por_rango["P√©rdida (<0%)"].append(f"{producto} ({rentabilidad:.1f}%)")
                    estado = "‚ùå P√âRDIDA"
                
                factores = f"M:{factor_mun:.2f} C:{factor_clima:.2f}"
                print(f"{producto:<15} {rentabilidad:>6.1f}%  {tendencia:<8} {factores:<12} {estado}")
    
    # Estad√≠sticas generales
    print(f"\n\nüìä ESTAD√çSTICAS GENERALES")
    print("=" * 50)
    print(f"‚Ä¢ Total productos analizados: {len(todas_rentabilidades)}")
    print(f"‚Ä¢ Rentabilidad promedio: {sum(todas_rentabilidades)/len(todas_rentabilidades):.1f}%")
    print(f"‚Ä¢ Rango obtenido: {min(todas_rentabilidades):.1f}% - {max(todas_rentabilidades):.1f}%")
    
    # Verificar cobertura del rango
    rango_obtenido = max(todas_rentabilidades) - min(todas_rentabilidades)
    print(f"‚Ä¢ Amplitud del rango: {rango_obtenido:.1f}%")
    
    if max(todas_rentabilidades) >= 80:
        print("‚úÖ Rentabilidades altas alcanzadas (‚â•80%)")
    if min(todas_rentabilidades) <= 20:
        print("‚úÖ Rentabilidades bajas incluidas (‚â§20%)")
    if rango_obtenido >= 60:
        print("‚úÖ Rango amplio logrado (‚â•60% de amplitud)")

def mostrar_distribucion_por_rangos():
    """
    Muestra la distribuci√≥n de productos por rangos de rentabilidad
    """
    print(f"\nüìà DISTRIBUCI√ìN POR RANGOS DE RENTABILIDAD")
    print("=" * 60)
    
    sipsa = SipsaService()
    
    # Recopilar datos de m√∫ltiples escenarios
    municipios = ["Facatativ√°", "Subachoque", "Madrid", "Mosquera"]
    fechas = [
        datetime(2025, 1, 15),   # Invierno
        datetime(2025, 4, 15),   # Primavera
        datetime(2025, 7, 15),   # Invierno medio
        datetime(2025, 10, 15),  # Veranillo
    ]
    temperaturas = [12.0, 16.0, 20.0]
    
    todas_rentabilidades = []
    
    for municipio in municipios:
        for fecha in fechas:
            for temp in temperaturas:
                recomendaciones = sipsa.obtener_productos_recomendados(municipio, fecha, temp)
                for rec in recomendaciones:
                    todas_rentabilidades.append(rec['rentabilidad_estimada'])
    
    # Clasificar por rangos
    rangos = {
        "Excelente (80-100%)": [r for r in todas_rentabilidades if r >= 80],
        "Muy Buena (60-79%)": [r for r in todas_rentabilidades if 60 <= r < 80],
        "Buena (40-59%)": [r for r in todas_rentabilidades if 40 <= r < 60],
        "Regular (20-39%)": [r for r in todas_rentabilidades if 20 <= r < 40],
        "Baja (5-19%)": [r for r in todas_rentabilidades if 5 <= r < 20],
        "Muy Baja (0-4%)": [r for r in todas_rentabilidades if 0 <= r < 5],
        "P√©rdida (<0%)": [r for r in todas_rentabilidades if r < 0]
    }
    
    total = len(todas_rentabilidades)
    
    print("Rango                Cantidad  Porcentaje  Distribuci√≥n Ideal")
    print("-" * 65)
    
    distribuciones_ideales = {
        "Excelente (80-100%)": "5-10%",
        "Muy Buena (60-79%)": "10-15%", 
        "Buena (40-59%)": "20-25%",
        "Regular (20-39%)": "30-35%",
        "Baja (5-19%)": "15-20%",
        "Muy Baja (0-4%)": "5-10%",
        "P√©rdida (<0%)": "5-10%"
    }
    
    for rango, productos in rangos.items():
        cantidad = len(productos)
        porcentaje = (cantidad / total) * 100 if total > 0 else 0
        ideal = distribuciones_ideales.get(rango, "N/A")
        
        # Indicador de si est√° en rango ideal
        if rango == "Excelente (80-100%)" and 5 <= porcentaje <= 15:
            indicador = "‚úÖ"
        elif rango == "Regular (20-39%)" and 25 <= porcentaje <= 40:
            indicador = "‚úÖ"
        elif 5 <= porcentaje <= 25:  # Rango general aceptable
            indicador = "‚úÖ"
        else:
            indicador = "‚ö†Ô∏è"
        
        print(f"{rango:<20} {cantidad:>7}  {porcentaje:>8.1f}%  {ideal:<12} {indicador}")
    
    print(f"\nTotal analizado: {total} productos")
    
    # Verificar objetivos
    print(f"\nüéØ VERIFICACI√ìN DE OBJETIVOS:")
    max_rent = max(todas_rentabilidades)
    min_rent = min(todas_rentabilidades)
    
    print(f"‚Ä¢ Rango completo 0-100%: {min_rent:.1f}% - {max_rent:.1f}%")
    if max_rent >= 90:
        print("  ‚úÖ Rentabilidades altas alcanzadas")
    if min_rent <= 10:
        print("  ‚úÖ Rentabilidades bajas incluidas")
    if (max_rent - min_rent) >= 80:
        print("  ‚úÖ Rango amplio logrado")
    
    # Distribuci√≥n realista
    excelentes = len(rangos["Excelente (80-100%)"])
    regulares = len(rangos["Regular (20-39%)"])
    
    if excelentes <= total * 0.15:  # M√°ximo 15% excelentes
        print("  ‚úÖ Pocos productos excelentes (realista)")
    if regulares >= total * 0.25:   # Al menos 25% regulares
        print("  ‚úÖ Mayor√≠a en rango regular (realista)")

if __name__ == "__main__":
    try:
        print("üí∞ AGROSOFT - RANGO COMPLETO 0-100% CON DISTRIBUCI√ìN REALISTA")
        print("=" * 80)
        
        probar_rango_completo()
        mostrar_distribucion_por_rangos()
        
        print("\n" + "=" * 80)
        print("‚úÖ SISTEMA CON RANGO COMPLETO IMPLEMENTADO")
        print("‚Ä¢ Rango: 0-100% (completo)")
        print("‚Ä¢ Distribuci√≥n: Realista (pocos al 100%, mayor√≠a 20-60%)")
        print("‚Ä¢ Factores: Todos funcionando correctamente")
        print("‚Ä¢ Tendencias: Bajando penalizada, Subiendo bonificada")
        print("‚Ä¢ Productos: Variabilidad amplia seg√∫n condiciones")
        
        print("\nüåê Prueba en el navegador:")
        print("http://127.0.0.1:8000/")
        print("Ahora ver√°s rango completo con distribuci√≥n inteligente")
        
    except Exception as e:
        print(f"Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
